// Generated by CoffeeScript 1.6.3
(function() {
  var collect_options, entities, extract, gatherer, identity, load, name, request, symbols, to_symbol, _i, _len, _ref,
    __slice = [].slice;

  request = require('request');

  entities = require('./entities');

  load = require('./load');

  symbols = require('./symbols');

  gatherer = module.exports;

  gatherer.origin = 'http://gatherer.wizards.com';

  gatherer.url = function(pathname, query) {
    var key, keys, url;
    if (query == null) {
      query = {};
    }
    url = "" + gatherer.origin + pathname;
    keys = Object.keys(query).sort();
    if (keys.length) {
      url += "?" + (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          _results.push("" + (encodeURIComponent(key)) + "=" + (encodeURIComponent(query[key])));
        }
        return _results;
      })()).join('&'));
    }
    return url;
  };

  gatherer.request = function() {
    var args, callback, options, uri;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (args.length >= 3) {
      uri = args[0], options = args[1], callback = args[2];
      options = JSON.parse(JSON.stringify(options));
      options.uri = uri;
    } else if (Object.prototype.toString.call(args[0]) === '[object String]') {
      uri = args[0], callback = args[1];
      options = {
        uri: uri
      };
    } else {
      options = args[0], callback = args[1];
    }
    return request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      } else if (res.statusCode !== 200) {
        return callback(new Error('unexpected status code'));
      } else {
        return callback(null, res, body);
      }
    });
  };

  _ref = ['card', 'languages', 'printings', 'set'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    gatherer[name] = require("./gatherer/" + name);
  }

  collect_options = function(label) {
    return function(callback) {
      gatherer.request(gatherer.url('/Pages/Default.aspx'), function(err, res, body) {
        var formats;
        if (err != null) {
          return callback(err);
        }
        try {
          formats = extract(body, label);
        } catch (_error) {
          err = _error;
          return callback(err);
        }
        return callback(null, formats);
      });
    };
  };

  extract = function(html, label) {
    var $, id, o, v, values;
    $ = load(html);
    id = "#ctl00_ctl00_MainContent_Content_SearchControls_" + label + "AddText";
    values = (function() {
      var _j, _len1, _ref1, _results;
      _ref1 = $(id).children();
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        o = _ref1[_j];
        _results.push($(o).attr('value'));
      }
      return _results;
    })();
    return values = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
        v = values[_j];
        if (v) {
          _results.push(entities.decode(v));
        }
      }
      return _results;
    })();
  };

  gatherer.formats = collect_options('format');

  gatherer.sets = collect_options('set');

  gatherer.types = collect_options('type');

  to_symbol = function(alt) {
    var m;
    m = /^(\S+) or (\S+)$/.exec(alt);
    return m && ("" + (to_symbol(m[1])) + "/" + (to_symbol(m[2]))) || symbols[alt] || alt;
  };

  gatherer._get_text = function(node) {
    var clone;
    clone = node.clone();
    clone.find('img').each(function() {
      return this.replaceWith("{" + (to_symbol(this.attr('alt'))) + "}");
    });
    return clone.text().trim();
  };

  identity = function(value) {
    return value;
  };

  gatherer._get_rules_text = function(node, get_text) {
    return node.children().toArray().map(get_text).filter(identity).join('\n\n');
  };

  gatherer._get_versions = function(image_nodes) {
    var versions;
    versions = {};
    image_nodes.each(function() {
      var expansion, rarity, _ref1;
      _ref1 = /^(.*\S)\s+[(](.+)[)]$/.exec(this.attr('alt')).slice(1), expansion = _ref1[0], rarity = _ref1[1];
      expansion = entities.decode(expansion);
      return versions[/\d+$/.exec(this.parent().attr('href'))] = {
        expansion: expansion,
        rarity: rarity
      };
    });
    return versions;
  };

  gatherer._set = function(obj, key, value) {
    if (!(value === void 0 || value !== value)) {
      return obj[key] = value;
    }
  };

  gatherer._to_stat = function(str) {
    var num;
    num = +(str != null ? str.replace('{1/2}', '.5') : void 0);
    if (num === num) {
      return num;
    } else {
      return str;
    }
  };

}).call(this);
