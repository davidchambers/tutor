// Generated by CoffeeScript 1.8.0
(function() {
  var cheerio, collect_options, entities, extract, gatherer, name, request, symbols, to_symbol, _, _i, _len, _ref,
    __slice = [].slice;

  cheerio = require('cheerio');

  entities = require('entities');

  request = require('request');

  _ = require('underscore');

  symbols = require('./symbols');

  gatherer = module.exports;

  gatherer.origin = 'http://gatherer.wizards.com';

  gatherer.url = function(pathname, query) {
    var key, keys, url;
    if (query == null) {
      query = {};
    }
    url = "" + gatherer.origin + pathname;
    keys = _.keys(query).sort();
    if (keys.length) {
      url += "?" + (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          _results.push("" + (encodeURIComponent(key)) + "=" + (encodeURIComponent(query[key])));
        }
        return _results;
      })()).join('&'));
    }
    return url;
  };

  gatherer.request = function() {
    var args, callback, options, uri;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (args.length >= 3) {
      uri = args[0], options = args[1], callback = args[2];
      options = JSON.parse(JSON.stringify(options));
      options.uri = uri;
    } else if (_.isString(args[0])) {
      uri = args[0], callback = args[1];
      options = {
        uri: uri
      };
    } else {
      options = args[0], callback = args[1];
    }
    return request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      } else if (res.statusCode !== 200) {
        return callback(new Error('unexpected status code'));
      } else if (body.indexOf('<div class="cardImage">') == -1) {
        return callback(new Error('no results'));
      } else {
        return callback(null, res, body);
      }
    });
  };

  _ref = ['card', 'languages', 'printings', 'set'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    gatherer[name] = require("./gatherer/" + name);
  }

  collect_options = function(label) {
    return function(callback) {
      gatherer.request(gatherer.url('/Pages/Default.aspx'), function(err, res, body) {
        if (err != null) {
          callback(err);
        } else {
          callback(null, extract(cheerio.load(body), label));
        }
      });
    };
  };

  extract = function($, label) {
    var id, o, v, values;
    id = "#ctl00_ctl00_MainContent_Content_SearchControls_" + label + "AddText";
    values = (function() {
      var _j, _len1, _ref1, _results;
      _ref1 = $(id).children();
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        o = _ref1[_j];
        _results.push($(o).attr('value'));
      }
      return _results;
    })();
    return values = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
        v = values[_j];
        if (v) {
          _results.push(entities.decode(v));
        }
      }
      return _results;
    })();
  };

  gatherer.formats = collect_options('format');

  gatherer.sets = collect_options('set');

  gatherer.types = collect_options('type');

  to_symbol = function(alt) {
    var m;
    m = /^(\S+) or (\S+)$/.exec(alt);
    return m && ("" + (to_symbol(m[1])) + "/" + (to_symbol(m[2]))) || symbols[alt] || alt;
  };

  gatherer._get_text = function(node) {
    var clone;
    clone = node.clone();
    _.each(clone.find('img'), function(el) {
      var $el;
      $el = cheerio(el);
      return $el.replaceWith("{" + (to_symbol($el.attr('alt'))) + "}");
    });
    return clone.text().trim();
  };

  gatherer._get_rules_text = function(node, get_text) {
    return _.map(node.children(), get_text).filter(Boolean).join('\n\n');
  };

  gatherer._get_versions = function(image_nodes) {
    return _.object(_.map(image_nodes, function(el) {
      var $el, key, match, value;
      $el = cheerio(el);
      key = /\d+$/.exec($el.parent().attr('href'));
      match = /^(.*) [(](.*?)[)]$/.exec($el.attr('alt'));
      value = {
        expansion: entities.decode(match[1]),
        rarity: match[2]
      };
      return [key, value];
    }));
  };

  gatherer._set = function(obj, key, value) {
    if (!(value === void 0 || _.isNaN(value))) {
      return obj[key] = value;
    }
  };

  gatherer._to_stat = function(str) {
    var num;
    num = +(str != null ? str.replace('{1/2}', '.5') : void 0);
    if (_.isNaN(num)) {
      return str;
    } else {
      return num;
    }
  };

}).call(this);
