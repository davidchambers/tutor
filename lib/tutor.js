// Generated by CoffeeScript 1.6.3
(function() {
  var Q, gatherer, name, tutor, _i, _len, _ref;

  Q = require('q');

  gatherer = require('./gatherer');

  tutor = module.exports;

  _ref = ['formats', 'set', 'sets', 'types'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    tutor[name] = gatherer[name];
  }

  tutor.card = function(details, callback) {
    var d1, d2, d3;
    switch (Object.prototype.toString.call(details)) {
      case '[object Number]':
        details = {
          id: details
        };
        break;
      case '[object String]':
        details = {
          name: details
        };
    }
    d1 = Q.defer();
    gatherer.card(details, d1.makeNodeResolver());
    d2 = Q.defer();
    gatherer.languages(details, d2.makeNodeResolver());
    d3 = Q.defer();
    gatherer.printings(details, d3.makeNodeResolver());
    return Q.all([d1.promise, d2.promise, d3.promise]).then(function(_arg) {
      var card, clone, key, languages, legality, value, versions, _ref1;
      card = _arg[0], languages = _arg[1], (_ref1 = _arg[2], legality = _ref1.legality, versions = _ref1.versions);
      if ('name' in details && card.name !== details.name) {
        clone = {};
        for (key in details) {
          value = details[key];
          clone[key] = value;
        }
        clone.name = card.name;
        return tutor.card(clone, callback);
      } else {
        card.languages = languages;
        card.legality = legality;
        card.versions = versions;
        return callback(null, card);
      }
    })["catch"](callback);
  };

}).call(this);
