// Generated by CoffeeScript 1.6.3
(function() {
  var Q, converted_mana_costs, extract, gatherer, load, supertypes, to_converted_mana_cost, url,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  url = require('url');

  Q = require('q');

  gatherer = require('../gatherer');

  load = require('../load');

  supertypes = require('../supertypes');

  module.exports = function(name, callback) {
    var d1, d2;
    d1 = Q.defer();
    gatherer.request(gatherer.url('/Pages/Search/Default.aspx', {
      action: 'advanced',
      output: 'spoiler',
      special: true,
      set: "[\"" + name + "\"]"
    }), d1.makeNodeResolver());
    d2 = Q.defer();
    gatherer.request(gatherer.url('/Pages/Search/Default.aspx', {
      set: "[\"" + name + "\"]",
      type: '+["Basic"]+["Land"]'
    }), d2.makeNodeResolver());
    Q.all([d1.promise, d2.promise]).then(function(_arg) {
      var $, $items, basics, body1, body2, card, clone, clones, id, ids, idx, key, match, pattern, set, value;
      body1 = _arg[0], body2 = _arg[1];
      basics = {};
      pattern = /^(?:[^:]+: )?(.+)(?= [(]\w+[)]$)/;
      ids = function($container) {
        var id, set, _results;
        set = {};
        $container.find('img').each(function() {
          var match;
          if (((match = pattern.exec(this.attr('alt'))) != null) && __indexOf.call(match, name) >= 0) {
            return set[url.parse(this.parent().attr('href'), true).query.multiverseid] = 1;
          }
        });
        _results = [];
        for (id in set) {
          _results.push(+id);
        }
        return _results;
      };
      $ = load(body2);
      if (($items = $('.cardItem')).length) {
        $items.each(function() {
          return basics[this.find('.cardTitle').text().trim()] = ids(this.find('.setVersions'));
        });
      } else {
        basics[$('.contentTitle').text().trim()] = ids($('.cardDetails'));
      }
      set = extract(body1, name);
      idx = set.length;
      while (idx--) {
        card = set[idx];
        if (card.name in basics) {
          match = /multiverseid=(\d+)/.exec(card.gatherer_url);
          clones = (function() {
            var _i, _len, _ref, _results;
            _ref = basics[card.name];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              clone = {};
              for (key in card) {
                value = card[key];
                clone[key] = value;
              }
              clone.gatherer_url = card.gatherer_url.replace(match[1], id);
              clone.image_url = card.image_url.replace(match[1], id);
              _results.push(clone);
            }
            return _results;
          })();
          clones.sort(function(a, b) {
            if (a.gatherer_url < b.gatherer_url) {
              return -1;
            } else {
              return 1;
            }
          });
          set.splice.apply(set, [idx, 1].concat(__slice.call(clones)));
        }
      }
      return callback(null, set);
    })["catch"](callback);
  };

  extract = function(html, name) {
    var $, card, cards, t;
    $ = load(html);
    t = function(el) {
      return gatherer._get_text($(el));
    };
    cards = [];
    card = null;
    $('.textspoiler').find('tr').each(function() {
      var first, key, param, pattern, power, rarity, second, subtypes, toughness, type, types, val, version, words, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
      _ref = this.children(), first = _ref[0], second = _ref[1];
      key = t(first);
      val = t(second);
      if (!val) {
        return;
      }
      switch (key) {
        case 'Name':
          if (card !== null) {
            cards.push(card);
          }
          param = /multiverseid=\d+/.exec($(second).find('a').attr('href'))[0];
          return card = {
            name: val,
            converted_mana_cost: 0,
            supertypes: [],
            types: [],
            subtypes: [],
            expansion: name,
            gatherer_url: "" + gatherer.origin + "/Pages/Card/Details.aspx?" + param,
            image_url: "" + gatherer.origin + "/Handlers/Image.ashx?" + param + "&type=card"
          };
        case 'Cost:':
          card.mana_cost = "{" + (val.match(/.\/.|\d+|[^()]/g).join('}{')) + "}";
          return card.converted_mana_cost = to_converted_mana_cost(card.mana_cost);
        case 'Type:':
          _ref1 = /^([^\u2014]+?)(?:\s+\u2014\s+(.+))?$/.exec(val).slice(1), types = _ref1[0], subtypes = _ref1[1];
          _ref2 = types.split(/\s+/);
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            type = _ref2[_i];
            card[__indexOf.call(supertypes, type) >= 0 ? 'supertypes' : 'types'].push(type);
          }
          if (subtypes) {
            return card.subtypes = subtypes.split(/\s+/);
          }
          break;
        case 'Rules Text:':
          return card.text = val.replace(/\n/g, '\n\n').replace(/(?:[{][(][2WUBRG][/][WUBRG][)])+[}]/gi, function(match) {
            return match.replace(/[{][(]/g, '{').replace(/[)][}]?/g, '}').toUpperCase();
          });
        case 'Color:':
          return card.color_indicator = val;
        case 'Pow/Tgh:':
          pattern = /^[(]([^\/]*(?:[{][^}]+[}])?)\/([^\/]*(?:[{][^}]+[}])?)[)]$/;
          _ref3 = pattern.exec(val).slice(1), power = _ref3[0], toughness = _ref3[1];
          card.power = gatherer._to_stat(power);
          return card.toughness = gatherer._to_stat(toughness);
        case 'Loyalty:':
          return card.loyalty = +/\d+/.exec(val)[0];
        case 'Hand/Life:':
          card.hand_modifier = +/Hand Modifier: ([-+]\d+)/.exec(val)[1];
          return card.life_modifier = +/Life Modifier: ([-+]\d+)/.exec(val)[1];
        case 'Set/Rarity:':
          card.versions = {};
          _ref4 = val.split(/,\s*/);
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            version = _ref4[_j];
            words = version.split(/\s+/);
            rarity = words.pop();
            if (rarity === 'Rare' && words[words.length - 1] === 'Mythic') {
              rarity = 'Mythic Rare';
              words.pop();
            }
            card.versions[words.join(' ')] = rarity;
          }
          return card.rarity = card.versions[name];
      }
    });
    cards.push(card);
    return cards;
  };

  converted_mana_costs = {
    '{X}': 0,
    '{4}': 4,
    '{10}': 10,
    '{16}': 16,
    '{2/W}': 2,
    '{Y}': 0,
    '{5}': 5,
    '{11}': 11,
    '{17}': 17,
    '{2/U}': 2,
    '{Z}': 0,
    '{6}': 6,
    '{12}': 12,
    '{18}': 18,
    '{2/B}': 2,
    '{0}': 0,
    '{7}': 7,
    '{13}': 13,
    '{19}': 19,
    '{2/R}': 2,
    '{2}': 2,
    '{8}': 8,
    '{14}': 14,
    '{20}': 20,
    '{2/G}': 2,
    '{3}': 3,
    '{9}': 9,
    '{15}': 15
  };

  to_converted_mana_cost = function(mana_cost) {
    var cmc, symbol, _i, _len, _ref, _ref1;
    cmc = 0;
    _ref = mana_cost.split(/(?=[{])/);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      symbol = _ref[_i];
      cmc += (_ref1 = converted_mana_costs[symbol]) != null ? _ref1 : 1;
    }
    return cmc;
  };

}).call(this);
