// Generated by CoffeeScript 1.6.2
(function() {
  var extract, gatherer, load, supertypes,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  gatherer = require('../gatherer');

  load = require('../load');

  supertypes = require('../supertypes');

  module.exports = function(details, callback) {
    var _ref;

    if ('which' in details && ((_ref = details.which) !== 'a' && _ref !== 'b')) {
      callback(new Error('invalid which property (valid values are "a" and "b")'));
    }
    gatherer.request(gatherer.card.url('Details.aspx', details), function(err, res, body) {
      if (err) {
        return callback(err);
      } else {
        return callback(null, extract(body, details));
      }
    });
  };

  extract = function(html, details) {
    var $, card, d, date, el, get_versions, m, rating, ruling, set, t, t1, verbose, votes, y, _i, _len, _ref, _ref1, _ref2, _ref3;

    verbose = 'id' in details;
    $ = load(html);
    t = function(el) {
      return gatherer._get_text($(el));
    };
    t1 = function(el) {
      return gatherer._get_text($(el).next());
    };
    card = {
      converted_mana_cost: 0,
      supertypes: [],
      types: [],
      subtypes: [],
      rulings: []
    };
    set = gatherer._set.bind(null, card);
    _ref = $('.cardDetails').find('tr.post');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      _ref1 = $(el).children(), date = _ref1[0], ruling = _ref1[1];
      _ref2 = t(date).split('/'), m = _ref2[0], d = _ref2[1], y = _ref2[2];
      if (m.length === 1) {
        m = '0' + m;
      }
      if (d.length === 1) {
        d = '0' + d;
      }
      card.rulings.push(["" + y + "-" + m + "-" + d, t(ruling).replace(/[ ]{2,}/g, ' ')]);
    }
    get_versions = function(el) {
      var expansion;

      expansion = $(el).find('.label').filter(function() {
        return t(this) === 'Expansion:';
      }).next();
      return gatherer._get_versions(expansion.find('img'));
    };
    $((function() {
      var left, right, _ref3;

      _ref3 = $('.cardComponentContainer'), left = _ref3[0], right = _ref3[1];
      if (details.which === 'b' || verbose && (details.id in get_versions(right) && !(details.id in get_versions(left))) || !verbose && (details.name.toLowerCase() === t($(right).find('.value').first()).toLowerCase())) {
        return left;
      } else {
        return right;
      }
    })()).remove();
    $('.label').each(function() {
      var $el, $flavor, match, pattern, power, subtypes, text, toughness, type, types, _j, _len1, _ref3, _ref4, _ref5;

      switch (t(this)) {
        case 'Card Name:':
          return set('name', t1(this));
        case 'Mana Cost:':
          return set('mana_cost', t1(this));
        case 'Converted Mana Cost:':
          return set('converted_mana_cost', +t1(this));
        case 'Types:':
          _ref3 = /^(.+?)(?:\s+\u2014\s+(.+))?$/.exec(t1(this)).slice(1), types = _ref3[0], subtypes = _ref3[1];
          _ref4 = types.split(/\s+/);
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            type = _ref4[_j];
            card[__indexOf.call(supertypes, type) >= 0 ? 'supertypes' : 'types'].push(type);
          }
          return set('subtypes', subtypes != null ? subtypes.split(/\s+/) : void 0);
        case 'Card Text:':
          return set('text', gatherer._get_rules_text(this.next(), t));
        case 'Flavor Text:':
          if (!verbose) {
            break;
          }
          $flavor = $(this).next();
          $el = $flavor.children().last();
          if (match = /^(\u2014|\u2015\u2015|\uFF5E)\s*(.+)$/.exec(t($el))) {
            set('flavor_text_attribution', match[2]);
            $el.remove();
          }
          pattern = /^["\u00AB\u201E\u300C]\s*(.+?)\s*["\u00BB\u300D]([.]?)$/;
          text = $flavor.children().map(function() {
            return t(this);
          }).join('\n');
          if (match && (match = pattern.exec(text))) {
            text = match[1] + match[2];
          }
          return set('flavor_text', text);
        case 'Color Indicator:':
          return set('color_indicator', t1(this));
        case 'Watermark:':
          return set('watermark', t1(this));
        case 'P/T:':
          _ref5 = /^(.+?)\s+\/\s+(.+)$/.exec(t1(this)).slice(1), power = _ref5[0], toughness = _ref5[1];
          set('power', gatherer._to_stat(power));
          return set('toughness', gatherer._to_stat(toughness));
        case 'Loyalty:':
          return set('loyalty', +t1(this));
        case 'Hand/Life:':
          text = t1(this);
          set('hand_modifier', +text.match(/Hand Modifier: ([+-]\d+)/)[1]);
          return set('life_modifier', +text.match(/Life Modifier: ([+-]\d+)/)[1]);
        case 'Expansion:':
          if (verbose) {
            return set('expansion', t($(this).next().find('a:last-child')));
          }
          break;
        case 'Rarity:':
          if (verbose) {
            return set('rarity', t1(this));
          }
          break;
        case 'Card Number:':
          if (verbose) {
            return set('number', gatherer._to_stat(t1(this)));
          }
          break;
        case 'Artist:':
          if (verbose) {
            return set('artist', t1(this));
          }
          break;
        case 'All Sets:':
          return set('versions', gatherer._get_versions(this.next().find('img')));
      }
    });
    _ref3 = /^CommunityRating:(\d(?:[.]\d+)?)\/5[(](\d+)votes?[)]$/.exec($('.textRating').text().replace(/\s+/g, '')).slice(1), rating = _ref3[0], votes = _ref3[1];
    set('community_rating', {
      rating: +rating,
      votes: +votes
    });
    return card;
  };

  module.exports.url = function() {
    var id, k, name, o, page, params, path, query, rest, v, _i, _len;

    path = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    params = {};
    for (_i = 0, _len = rest.length; _i < _len; _i++) {
      o = rest[_i];
      for (k in o) {
        v = o[k];
        params[k] = v;
      }
    }
    id = params.id, name = params.name, page = params.page;
    query = {};
    if ((id != null) && (name != null)) {
      query.multiverseid = id;
      query.part = name;
    } else if (id != null) {
      query.multiverseid = id;
    } else {
      query.name = name;
    }
    if (page > 1) {
      query.page = page - 1;
    }
    return gatherer.url("/Pages/Card/" + path, query);
  };

}).call(this);
